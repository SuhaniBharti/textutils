{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","onClick","toggleMode","role","htmlFor","TextForm","text","setText","useState","value","onChange","event","target","rows","handleUpClick","newText","toUpperCase","handleLoClick","toLowerCase","handleClearClick","handleCopyClick","navigator","clipboard","writeText","handleExtraSpaces","split","join","trim","length","defaultProps","aboutText","Alert","alert","msg","App","setMode","setAlert","showAlert","message","setTimeout","Fragment","document","body","classList","add","remove","heading","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.48fc18fc.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from 'react-router-dom'\r\n\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li> */}\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n        </li> */}\r\n      \r\n      </ul>\r\n      {/* <form classNameName=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n  <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n<input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n<label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n</div>\r\n  </div>\r\n</div>\r\n</nav>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\nNavbar.propTypes = {\r\n    title:PropTypes.string.isRequired,\r\n    aboutText:PropTypes.string\r\n    }\r\n  Navbar.defaultProps = {\r\n    title:\"set title\",\r\n    aboutText:\"setabout\"\r\n\r\n  }","// import React, { useState } from 'react';\r\n\r\n\r\n\r\n// function TextForm(props) {\r\n//     const handleUpClick=()=>{\r\n//     console.log(\"uppercase was clicked\");\r\n//     let newText=text.toUpperCase();\r\n//     setText(newText)\r\n//     props.showAlert(\"converted to upper\",\"success\")\r\n//     }\r\n//     const handleLowClick=()=>{\r\n//         console.log(\"uppercase was clicked\");\r\n//         let newText=text.toLowerCase();\r\n//         setText(newText)\r\n//         props.showAlert(\"converted to lower case\",\"success\")\r\n//         }\r\n    \r\n\r\n//     const handleOnChange=(event)=>{\r\n//         console.log(\"On change\");\r\n//         setText(event.target.value);\r\n//     }\r\n//     const clearText=()=>{\r\n//       let newText=\" \"\r\n//       setText(newText)\r\n//     }\r\n//     const handleCopy=()=>{\r\n//         var text=document.getElementById(\"myBox\"); \r\n//         text.select();\r\n//         navigator.clipboard.writeText(text.value);\r\n//     }\r\n//     const handleSpaces=()=>{\r\n//       let newText=text.split(/[ ]+/);\r\n//       setText(newText.join(\" \"))\r\n//     }\r\n//     const [text, setText] = useState(' ');\r\n//     //setText(\"new text\");\r\n//   return (\r\n//     <>\r\n//     <div className='container'style={{color:props.mode==='dark'?'white':'black'}}>\r\n     \r\n//       <h1>{props.heading} </h1>\r\n//     <div className=\"mb-3\">\r\n   \r\n//     <textarea clasName=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\" style={{ width: '100%',backgroundColor: props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'}} ></textarea>\r\n//     </div>\r\n//     <button className='btn btn-primary mx-2' onClick={handleUpClick}>Convert to uppercase</button>\r\n//     <button  className='btn btn-primary' onClick={handleLowClick}>Convert to lowercase</button>\r\n//     <button  className='btn btn-primary mx-2' onClick={clearText}>Clear text</button>\r\n//     <button  className='btn btn-primary mx-2' onClick={handleCopy}>Copy text</button>\r\n//     <button  className='btn btn-primary mx-2' onClick={handleSpaces}>remove extraspaces</button>\r\n//    </div>\r\n//    <div className='container my-3'style={{color:props.mode==='dark'?'white':'black'}}>\r\n//     <h2>Your text summary</h2>\r\n//     <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n//     <p>{0.008 * text.split(\" \").length } minutes read</p> \r\n//     <h2>Preview</h2>\r\n//     <p>{text}</p>\r\n//    </div>\r\n//     </>\r\n//   )\r\n// }\r\n\r\n// export default TextForm\r\nimport React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    };\r\n\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    };\r\n\r\n    const handleClearClick = () => {\r\n        setText(\"\");\r\n    };\r\n\r\n    const handleCopyClick = () => {\r\n        navigator.clipboard.writeText(text);\r\n    };\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/).join(\" \");\r\n        setText(newText);\r\n    };\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Enter the text to analyze</h1>\r\n            <textarea \r\n                className=\"form-control\" \r\n                value={text} \r\n                onChange={handleOnChange} \r\n                rows=\"8\">\r\n            </textarea>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to lowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopyClick}>Copy text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove extra spaces</button>\r\n            \r\n            <h2>Your text summary</h2>\r\n            <p>{text.trim() === \"\" ? 0 : text.trim().split(/\\s+/).length} words and {text.length} characters</p>\r\n            <p>{0.008 * (text.trim() === \"\" ? 0 : text.trim().split(/\\s+/).length)} minutes read</p>\r\n            \r\n            <h2>Preview</h2>\r\n            <p>{text.length > 0 ? text : \"Nothing to preview!\"}</p>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  return (\r\n    <div>\r\n    {props.alert && (<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{props.alert.type}</strong>: {props.alert.msg}\r\n    \r\n</div>)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","\r\nimport './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\nimport React, { useState } from 'react';\r\nimport Alert from './components/Alert';\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light');\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({ msg: message, type: type });\r\n    setTimeout(() => setAlert(null), 2000);\r\n  };\r\n\r\n  const toggleMode = () => {\r\n    if (mode === 'light') {\r\n      setMode('dark');\r\n      document.body.classList.add(\"dark-mode\"); // Use CSS class for styling\r\n      showAlert(\"Dark mode has been applied\", \"success\");\r\n      document.title = 'TextUtils - Dark Mode';\r\n    } else {\r\n      setMode('light');\r\n      document.body.classList.remove(\"dark-mode\");\r\n      showAlert(\"Light mode has been set\", \"success\");\r\n      document.title = 'TextUtils - Light Mode';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} />\r\n      <Alert alert={alert} />\r\n      <div className=\"container\">\r\n        <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}